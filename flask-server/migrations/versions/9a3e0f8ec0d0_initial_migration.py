"""initial migration

Revision ID: 9a3e0f8ec0d0
Revises: 454965dd65ee
Create Date: 2024-03-11 21:47:25.715219

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlalchemy.dialects.postgresql import ARRAY
from sqlalchemy import create_engine
import psycopg2


# revision identifiers, used by Alembic.
revision = '9a3e0f8ec0d0'
down_revision = '454965dd65ee'
branch_labels = None
depends_on = None

# Create a SQLAlchemy engine
engine = create_engine('postgresql://root:root@localhost:5432/chatgpt_basic_quiz_db')

conn = psycopg2.connect(
    database="chatgpt_basic_quiz_db",
    user="root",
    password="root",
    host="localhost",
    port="5432"
)

cursor = conn.cursor()
cursor.execute("TRUNCATE TABLE questions RESTART IDENTITY;")
# cursor.execute("INSERT INTO questions (correct_answer) VALUES (%s)", (question_answered,))
conn.commit()

# with engine.connect() as connection:
#     # Construct the TRUNCATE SQL command as an SQLAlchemy text() object
#     truncate_command = "TRUNCATE TABLE questions RESTART IDENTITY;"
#     connection.execute(truncate_command)


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute
    op.add_column('questions', sa.Column('options', ARRAY(sa.Integer), nullable=False))
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('user_id', sa.INTEGER(), server_default=sa.text("nextval('users_user_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.PrimaryKeyConstraint('user_id', name='users_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('responses',
    sa.Column('response_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('question_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('user_answer', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('quiz_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['question_id'], ['questions.question_id'], name='responses_question_id_fkey'),
    sa.ForeignKeyConstraint(['quiz_id'], ['quizzes.quiz_id'], name='responses_quiz_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], name='responses_user_id_fkey'),
    sa.PrimaryKeyConstraint('response_id', name='responses_pkey')
    )
    op.create_table('questions',
    sa.Column('question_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('question_topic', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('question_difficulty', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('correct_answer', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('question_text', sa.VARCHAR(length=800), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('question_id', name='questions_pkey')
    )
    op.create_table('quizzes',
    sa.Column('quiz_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('quiz_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('quiz_description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('start_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('end_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('quiz_id', name='quizzes_pkey')
    )
    # ### end Alembic commands ###
